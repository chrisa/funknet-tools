This is the Funknet tools package. 

What this code is for:

This code expects to either be run on a Unix PC-router running zebra,
or to be pointed at a Cisco router. With an AS number, it retrieves
tunnel and routing configuration from a Whois database, and retrieves
the local system's current configuration. It then amends that current
configuration to match the Whois database.

What you need:

Either - a Linux/BSD/Solaris/OSX box running Zebra BGP, or a Cisco
router. See the Perl dependencies in the DEPENDENCIES file. 

To try the code: 

* if you don't have a router set up, use the -c switch which will
  generate a config based only on the whois, not a diff based on whois
  and router config.

* copy funknet.conf.dist to funknet.conf and edit to taste. 
  -- *or* run config.pl, specifying a non-existent config file and 
     the -i switch, which will prompt you for the config params
     shown below. This requires Term::Interact. 

* make sure you have RtConfig available (in /usr/local/bin/RtConfig by
  default -- set the 'rtconfig_path' param in your funknet.conf).

* set your local_* params:

local_as: your local AS number. The code will try to configure your router
          for this AS's objects in the whoisdb.

local_router: the platform you're using for routing. Currently only
              'ios' and 'zebra' are supported.
  
local_os: the platform you're using for tunnels. Choose from bsd,
          solaris, linux and ios. OSX counts as bsd. Linux doesn't
          work yet.

local_host: the ip address where your router's configuration interface
            lives. On a Unix platform, likely to be 127.0.0.1.

local_endpoint: this particular router's tunnel endpoint address. This 
                exists to support multiple routers within an AS.

* set your ignore_if list: the code will leave these interfaces
  alone. This is useful for testing, and if you have tunnels to places
  not configured by this code.

* set your root-method, if you want to have the code apply its changes. 
  Only 'runas' works for now, where you run the code as root and it just 
  runs the commands. 'sudo' and 'userv' are planned. 

* set your CLI authentication params. 'username' is required if you're
  running 'aaa new-model' on IOS, otherwise just a password is needed. 
  If you want the code to be able to make changes, provide 'enable'. 
  'enable' is *not* required for the code to just extract the current
  config. 
 
Run config.pl as:
$ ./config.pl -f funknet.conf 

Add a -d for copious debug output. Add a -a if you want to try the
'apply' code.

You'll get a list of proposed changes to your router and host's
configuration. For example:

Proposed changes:

BGP:
configure terminal
no router bgp 65002
router bgp AS65001
no network 192.168.74.0 mask 255.255.255.0
no network 213.210.34.176 mask 255.255.255.240
neighbor 10.2.3.2 remote-as 65002
neighbor 10.2.3.2 description NODNOL-MUNKY

neighbor 10.2.0.1 remote-as 65000
neighbor 10.2.0.1 description SPLURBY-MUNKY

no neighbor 10.2.0.37
exit
no route-map 65000import
no ip prefix-list 65000import
no route-map 65000export
no ip prefix-list 65000export
exit
clear ip bgp *

Tunnels:
configure terminal
no interface Tunnel0
exit
configure terminal
interface Tunnel0
tunnel mode ipip
tunnel source 62.169.139.122
tunnel destination 131.231.83.95
ip address 10.2.0.2 255.255.255.252
exit
configure terminal
interface Tunnel1
tunnel mode ipip
tunnel source 62.169.139.122
tunnel destination 213.210.34.174
ip address 10.2.3.1 255.255.255.252
exit

