package Funknet::Config::CLI;
use strict;
use Funknet::Config::CLI::Secrets;
use Funknet::Config::CLI::Zebra;
use Funknet::Config::CLI::IOS;
use Net::Telnet;

=head1 NAME

Funknet::Config::CLI

=head1 SYNOPSIS

    my $cli = Funknet::Config::CLI->new();
    @local_tun = $cli->get_interfaces;

    my $cli = Funknet::Config::CLI->new();
    my $bgp = $cli->get_bgp;

=head1 DESCRIPTION

This module is the base class for the router-specific methods for
retrieving data from the Zebra and IOS command-line interfaces. The
constructor returns an object containing all the information required
to connect to the router (address/username/passwords), blessed into
the appropriate class depending on the local_router config param.

=head1 METHODS

get_bgp and get_access_list are implemented in both IOS.pm and
Zebra.pm, but accessed through an object returned from the constructor
of this module.

=head2 get_bgp

This method retrieves the BGP configuration from the running
router. The data structure is returned as a hashref. The top level
data structure is Funknet::Config::BGP, which contains the routes
advertised (network statements) for this BGP router. (todo: add other
BGP configuration statements to this object - ebgp multihop etc.)

The BGP object contains a list of Neighbor objects, which represent
the currently configured sessions.

=head2 get_access_list

This method retrieves an access list from the router. It translates
the 'sho ip prefix-list $name' output into the config commands form
generated by RtConfig. (todo: this.)

=head2 check_login

A sort of internal method, but called from the constructor of
CLI.pm. Checks that the relevant authentication information is
available, including enable. (todo: argument to make enable password
optional?)

=cut

sub new {
    my ($class, %args) = @_;
    my $self = bless {}, $class;
    my $l = Funknet::Config::ConfigFile->local;

    $self->{_username} = Funknet::Config::CLI::Secrets->username( $l->{host} );
    $self->{_password} = Funknet::Config::CLI::Secrets->password( $l->{host} );
    $self->{_enable}   = Funknet::Config::CLI::Secrets->enable(   $l->{host} );

    # rebless into relevant class

    $l->{router} eq 'ios' and 
	bless $self, 'Funknet::Config::CLI::IOS';
    $l->{router} eq 'zebra' and 
	bless $self, 'Funknet::Config::CLI::Zebra';

    # check we have the correct details or don't return the object.
    
    $self->check_login
	or return undef;

    return $self;
}


1;
