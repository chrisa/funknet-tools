#!/usr/bin/perl

# $Id$
#
# Copyright (c) 2003
#	The funknet.org Group.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by The funknet.org
#	Group and its contributors.
# 4. Neither the name of the Group nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE GROUP AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE GROUP OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use strict;
use lib './lib';
use Funknet::Config;
use Funknet::Debug;
use Getopt::Std;
use Data::Dumper;

=head1 NAME

config.pl

=head1 DESCRIPTION

This is the main driver script for Funknet::Config. 

=head1 OPTIONS

=head2 -a 

'apply', Actually carries out the commands it proposes.

=head2 -c

'config', just do the config based on whois, don't try and do a diff.

=head2 -q 

'quiet', for use in crontab, warnings and notifications of changes only. 

=head2 -f <config file location>

Specify the config file location.

=head2 -d

Turn on copious debugging information

=head2 -e

Do encryption config

=head2 -i

Request interactive initial setup of funknet.conf

=head2 -w

Writes out the tunnel config to a file, for use in startup scripts. 
(Must be used with -c, to generate a full config)

=head2 -r

Do firewall _R_ules for the local system.

=cut

my %opt;
getopts('ciwaqderf:', \%opt);

unless ($opt{f}) {
    print STDERR "usage: $0 -f path_to_config_file\n";
    exit(1);
}
unless (-f $opt{f}) {
    print STDERR "-f option requires a path to a readable funknet.conf file\n";
    exit(1);
}

if ($opt{d}) {
    $DEBUG = 1;
}

my $config = Funknet::Config->new( configfile  => $opt{f},
				   interactive => $opt{i}, );

my ($bgp, $tun, $enc, $fwall);
if ($opt{c}) {
    my ($whois_bgp, $whois_tun, $whois_enc, $whois_fwall);
    debug("Generating BGP config");
    ($bgp, $whois_bgp) = $config->bgp_config or die "bgp_config failed: ".$config->error;
    debug("Generating tunnel config");
    ($tun, $whois_tun) = $config->tun_config or die "tun_config failed: ".$config->error;
    if ($opt{r}) {
	debug("Generating firewall config");
	($fwall, $whois_fwall) = $config->fwall_config($whois_tun) or die "fwall_config failed: ".$config->error;
    }
    if ($opt{e}) {
	debug("Generating encryption config");
	($enc, $whois_enc) = $config->enc_config($whois_tun) or die "enc_config files: ".$config->error;
	# replace the $tun config from above with a regenned 
	# one that includes the possible encryption config
	$tun = $whois_tun->config;
    }

} else {
    debug("Generating BGP diff");
    $bgp = $config->bgp_diff or die "bgp_diff failed: ".$config->error;
    debug("Generating tunnel diff");
    my ($whois_tun, $host_tun, $whois_fwall, $host_fwall);
    ($tun, $whois_tun, $host_tun) = $config->tun_diff or die "tun_diff failed: ".$config->error;
    if ($opt{r}) {
	debug("Generating firewall diff");
	($fwall, $whois_fwall, $host_fwall) = $config->fwall_diff($whois_tun) or die "fwall_diff failed: ".$config->error;
    }
    if ($opt{e}) {
	debug("Generating encryption diff");
	$enc = $config->enc_diff($whois_tun, $host_tun) or die "enc_diff files: ".$config->error;
	# replace the $tun diff from above with a regenned 
	# one that includes the possible encryption config
	$tun = $whois_tun->diff($host_tun);
    }
}

# Errors

my $warnings = $config->warn;
my $errors   = $config->error;
if ($warnings && !$config->{_config}->{warnings}) {
    print "warnings generated:\n$warnings\n";
}
if ($errors) {
    print "errors generated:\n$errors\n";
}

# Dump the commands generated by the diff.
unless ($opt{q}) {
    print "Proposed changes:\n";
    print "BGP:\n";
    print $bgp->as_text;
    print "\n";
    print "Tunnels:\n";
    print $tun->as_text;
    print "\n";
    if ($opt{r}) {
	print "Firewall:\n";
	print $fwall->as_text;
	print "\n";
    }
    if ($opt{e}) {
	print "Encryption:\n";
	print $enc->as_text;
	print "\n";
    }
}

# Run the commands on the local system.
if ($opt{a}) {
    debug("Generating BGP config");
    $bgp->apply;
    debug("Generating Tunnel config");
    $tun->apply;
    if ($opt{r}) {
	debug("Generating Firewall config");
	$fwall->apply;
    }
    if ($opt{e}) {
	debug("Generating Encryption config");
	$enc->apply;
    }
}

# Write the tunnel config out to the rcfile
if ($opt{w}) {
    if ($opt{c}) {
	debug("Writing tunnel config");
	my $combined = Funknet::Config::CommandSet->new( target => 'host',
							 cmds   => [
								    $tun->cmds(),
								    $fwall->cmds()
								   ]
						       );
	$combined->writeout();
    } else {
	debug("attempt to write tunnel/firewall config to RCFile from a diff");
    } 
}
