The keystash:

We have all mntners' public keys both in the database and in the
funknet-whois user's gpg keyring. With this we can authenticate mails
from mntners and send them encrypted mail. 

These users can request certificates be generated and signed by the
Funknet CA for OpenVPN and IPSec purposes, or they can generate their
own CSR and request it be signed by the Funknet CA. The certificate
generator will be a mail robot processing signed mail, containing the
tunnel object which requires a certificate (in the style of the RIPE
reverse-delegation robot). This will cause the cert and keys to be
created, based on the values in the tunnel object (i.e. type: and
name:). There will also be a web interface to the CA, protected by 
https and basic auth with a reasonably well-known password. 

The cert will be added to the whois database as a key-cert object. The
private key will be stored in the mntner's private area on the
webserver, and the username and password mailed to the mntner
encrypted, using the email address and public key stored in the
whois. The private area will only be served by an https daemon.

The mntner must then add the username and password to their
funknet.conf file, and add the key-cert name to the tunnel object's
encryption: field. It may also be neccessary to alter the tunnel's
type: field. Then on the next run of config.pl, the tunnel will be
set up using the certificate from the whois and the private key from
the secure webserver. 

The config process will cache the objects locally on the node, so once
it has set up its tunnels once, it can set them up again without 
needing to query the remote keystash. 

Example directory structure:

/etc/racoon/certs   // holds certs which are in use, pem format
/etc/racoon/private // holds keys which are in use, pem format

/etc/funknet/keystash/cert   // holds cached certs in 'whois object' format 
/etc/funknet/keystash/key    // holds cached keys in 'whois object' format

Example config process:

Consider the tunnel:

tunnel:       MUNKYII-BLANK
type:         ipip
as:           AS65030
as:           AS65023
encryption:   X509CERT-cn=MUNKYII
encryption:   X509CERT-cn=BLANK
address:      10.2.6.5
address:      10.2.6.6
endpoint:     81.187.70.18
endpoint:     213.129.72.23
admin-c:      CA1-FUNKNET
tech-c:       CA1-FUNKNET
mnt-by:       CHRIS
notify:       chris@nodnol.org
changed:      chris@nodnol.org 20040705
source:       FUNKNET

We run the config process on MUNKYII. This tunnel is of type 'ipip'
and has encryption lines referencing certificates, so it concludes it
should do IPSec transport mode for IPIP tunnel.

The certificate 'cn=MUNKYII' is in the whois, and is retrieved and
cached in /etc/funknet/keystash/cert, and the private key is retrieved
from the auth/https webserver. If the key was not generated by the
centralised cert system, the node maintainer may pre-populate the
local cache directory /etc/funknet/keystash/key.

The config process then uses the certs and the local config to
generate racoon.conf and setkey.conf fragments for this connection. 
These are then included into the main configs. 

Tunnels and BGP sessions are set up as per usual. 
